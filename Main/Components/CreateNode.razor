@page "/CreateNode"

@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations

@* @typeparam Model *@

@* @{
    ViewData["Title"] = "CreateNode";
} *@

<h1>Create Node</h1>

@* <h2>@ViewData["Title"]</h2> *@

@* <form method="post" @onsubmit="(() => OnSubmit(NavigationManager))">
 *@
<EditForm Model="model" OnValidSubmit="OnSubmit">

 <div class="form-group">
        <label for="FirstName">First Name:</label>
        <input id="FirstName" @bind="@model.FirstName" class="form-control" />
        <ValidationMessage For="@(() => model.FirstName)" class="text-danger" />
    </div>

    <div class="form-group">
        <label for="LastName">Last Name:</label>
        <input id="LastName" @bind="@model.LastName" class="form-control" />
        <ValidationMessage For="@(() => model.LastName)" class="text-danger" />
    </div>

    <div class="form-group">
        <label for="Address">Address:</label>
        <input id="Address" @bind="@model.Address" class="form-control" />
        <ValidationMessage For="@(() => model.Address)" class="text-danger" />
    </div>

    <div class="form-group">
        <label for="Telephone">Telephone:</label>
        <input id="Telephone" @bind="@model.Telephone" class="form-control" />
        <ValidationMessage For="@(() => model.Telephone)" class="text-danger" />
    </div>

    <button type="submit" class="btn btn-primary">Create</button>
</EditForm>

@code {
    public Model model { get; set; } = new Model();

    [Inject]
    private NavigationManager NavigationManager { get; set; }

    private async Task OnSubmit()
    {
        var isValid = await ValidateForm();
        if (!isValid)
            return;
        NavigationManager.NavigateTo("/SuccessPage");
    }


    private async Task<bool> ValidateForm()
    {
        var validationContext = new ValidationContext(model);
        var validationResults = new List<ValidationResult>();

        if (!Validator.TryValidateObject(model, validationContext, validationResults, true))
        {
            // Handle validation errors
            // You can display the errors or handle them in any other way
            return false;
        }

        return true;
    }
}
